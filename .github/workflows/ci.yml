name: CI

on:
  push:
    paths:
      - 'custom_components/**'
      - 'tests/**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'custom_components/**'
      - 'tests/**'

jobs:

  black:
    name: Python Code Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from GitHub
        uses: "actions/checkout@v2"
      - name: Black Code Format Check
        uses: lgeiger/black-action@master
        with:
          args: ". --check --fast --diff"

  tests:
    name: Python Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from GitHub
        uses: "actions/checkout@v2"
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Generate Requirements lists
        run: |
          python3 .github/generate_requirements.py
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_tests.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --ignore W503,E722,F722  --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=15 --max-line-length=127 --statistics
  #     - name: Test with pytest
  #       run: |
  #         pip install pytest
  #         pytest

  security:
    name: Security check - Bandit
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from GitHub
        uses: "actions/checkout@v2"
      - name: Security check - Bandit
        uses: ioggstream/bandit-report-artifacts@v0.0.2
        with:
          project_path: custom_components/openmediavault
          config_file: .github/bandit.yaml
          ignore_failure: false
      - name: Security check report artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Security report
          path: output/security_report.txt

  validate:
    name: Check hassfest
    needs: [tests]
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out code from GitHub
        uses: "actions/checkout@v2"
      - name: Run hassfest
        uses: home-assistant/actions/hassfest@master
